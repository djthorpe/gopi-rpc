/*
  Go Language Raspberry Pi Interface
  (c) Copyright David Thorpe 2016-2020
  All Rights Reserved
  For Licensing and Usage information, please see LICENSE.md
*/

syntax = "proto3";
package gaffer;

// Import dependencies
import "google/protobuf/empty.proto";
import "gaffer/service.proto";

// The Kernel service definition
service Kernel {
  // Simple ping method to show server is "up"
  rpc Ping (google.protobuf.Empty) returns (google.protobuf.Empty);

  // Create a new process
  rpc CreateProcess (Service) returns (ProcessId);

  // Run a process
  rpc RunProcess (ProcessId) returns (google.protobuf.Empty);

  // Stop a process
  rpc StopProcess (ProcessId) returns (google.protobuf.Empty);

  // Return filtered list of processes
  rpc Processes (ProcessId) returns (KernelProcessList);

  // Return list of service executables
  rpc Executables (google.protobuf.Empty) returns (KernelExecutableList);

  // Stream filtered list of events
  rpc StreamEvents (ProcessId) returns (stream KernelProcessEvent); 
}

// A returned process identifier
message ProcessId {
  uint32 id = 1;    // Process ID of a running process
}

// Return a list of processes
message KernelProcessList {
  repeated KernelProcess process = 1;
}

// Return a list of executables
message KernelExecutableList {
  repeated string executable = 1;
}

// Return information about a process
message KernelProcess { 
  ProcessId id = 1;
  State state = 2;
  Service service = 3;

  enum State {
    	NONE = 0;
      NEW = 1;
      RUNNING = 2;
      STOPPING = 3;
      STOPPED = 4;
  }
}

// Monitor discovery changes
message KernelProcessEvent {
  State state = 1;
  KernelProcess process = 2;
  bytes buf = 3;
  string error = 4;

  enum State {
    NONE = 0;
    NEW = 1;
    RUNNING = 2;
    STOPPING = 3;
    STOPPED = 4;
    STDOUT = 5;
    STDERR = 6;
  }
}
