//
//Go Language Raspberry Pi Interface
//(c) Copyright David Thorpe 2016-2020
//All Rights Reserved
//For Licensing and Usage information, please see LICENSE.md

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.4
// source: gaffer/gaffer.proto

package gaffer

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Update a service
type ServiceUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Service *Service              `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"` // The service and fields to update
	Fields  *field_mask.FieldMask `protobuf:"bytes,2,opt,name=fields,proto3" json:"fields,omitempty"`   // The fields to update. Valid fields to
}

func (x *ServiceUpdateRequest) Reset() {
	*x = ServiceUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gaffer_gaffer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceUpdateRequest) ProtoMessage() {}

func (x *ServiceUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gaffer_gaffer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceUpdateRequest.ProtoReflect.Descriptor instead.
func (*ServiceUpdateRequest) Descriptor() ([]byte, []int) {
	return file_gaffer_gaffer_proto_rawDescGZIP(), []int{0}
}

func (x *ServiceUpdateRequest) GetService() *Service {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *ServiceUpdateRequest) GetFields() *field_mask.FieldMask {
	if x != nil {
		return x.Fields
	}
	return nil
}

var File_gaffer_gaffer_proto protoreflect.FileDescriptor

var file_gaffer_gaffer_proto_rawDesc = []byte{
	0x0a, 0x13, 0x67, 0x61, 0x66, 0x66, 0x65, 0x72, 0x2f, 0x67, 0x61, 0x66, 0x66, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x67, 0x61, 0x66, 0x66, 0x65, 0x72, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x61,
	0x66, 0x66, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x75, 0x0a, 0x14, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x61,
	0x66, 0x66, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73,
	0x6b, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x32, 0xe7, 0x01, 0x0a, 0x06, 0x47, 0x61,
	0x66, 0x66, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x08,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x13, 0x2e, 0x67, 0x61, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x1c, 0x2e, 0x67, 0x61, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e,
	0x67, 0x61, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x11, 0x2e, 0x67, 0x61,
	0x66, 0x66, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x1a, 0x13,
	0x2e, 0x67, 0x61, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x31, 0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x64, 0x6a, 0x74, 0x68, 0x6f, 0x72, 0x70, 0x65, 0x2f, 0x67, 0x6f, 0x70, 0x69, 0x2d,
	0x72, 0x70, 0x63, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x67, 0x61, 0x66, 0x66, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gaffer_gaffer_proto_rawDescOnce sync.Once
	file_gaffer_gaffer_proto_rawDescData = file_gaffer_gaffer_proto_rawDesc
)

func file_gaffer_gaffer_proto_rawDescGZIP() []byte {
	file_gaffer_gaffer_proto_rawDescOnce.Do(func() {
		file_gaffer_gaffer_proto_rawDescData = protoimpl.X.CompressGZIP(file_gaffer_gaffer_proto_rawDescData)
	})
	return file_gaffer_gaffer_proto_rawDescData
}

var file_gaffer_gaffer_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_gaffer_gaffer_proto_goTypes = []interface{}{
	(*ServiceUpdateRequest)(nil), // 0: gaffer.ServiceUpdateRequest
	(*Service)(nil),              // 1: gaffer.Service
	(*field_mask.FieldMask)(nil), // 2: google.protobuf.FieldMask
	(*empty.Empty)(nil),          // 3: google.protobuf.Empty
	(*ServiceId)(nil),            // 4: gaffer.ServiceId
	(*ServiceList)(nil),          // 5: gaffer.ServiceList
}
var file_gaffer_gaffer_proto_depIdxs = []int32{
	1, // 0: gaffer.ServiceUpdateRequest.service:type_name -> gaffer.Service
	2, // 1: gaffer.ServiceUpdateRequest.fields:type_name -> google.protobuf.FieldMask
	3, // 2: gaffer.Gaffer.Ping:input_type -> google.protobuf.Empty
	3, // 3: gaffer.Gaffer.Services:input_type -> google.protobuf.Empty
	0, // 4: gaffer.Gaffer.Update:input_type -> gaffer.ServiceUpdateRequest
	4, // 5: gaffer.Gaffer.Start:input_type -> gaffer.ServiceId
	3, // 6: gaffer.Gaffer.Ping:output_type -> google.protobuf.Empty
	5, // 7: gaffer.Gaffer.Services:output_type -> gaffer.ServiceList
	5, // 8: gaffer.Gaffer.Update:output_type -> gaffer.ServiceList
	5, // 9: gaffer.Gaffer.Start:output_type -> gaffer.ServiceList
	6, // [6:10] is the sub-list for method output_type
	2, // [2:6] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_gaffer_gaffer_proto_init() }
func file_gaffer_gaffer_proto_init() {
	if File_gaffer_gaffer_proto != nil {
		return
	}
	file_gaffer_service_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_gaffer_gaffer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gaffer_gaffer_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_gaffer_gaffer_proto_goTypes,
		DependencyIndexes: file_gaffer_gaffer_proto_depIdxs,
		MessageInfos:      file_gaffer_gaffer_proto_msgTypes,
	}.Build()
	File_gaffer_gaffer_proto = out.File
	file_gaffer_gaffer_proto_rawDesc = nil
	file_gaffer_gaffer_proto_goTypes = nil
	file_gaffer_gaffer_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GafferClient is the client API for Gaffer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GafferClient interface {
	// Simple ping method to show server is "up"
	Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// Return services
	Services(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ServiceList, error)
	// Update a service
	Update(ctx context.Context, in *ServiceUpdateRequest, opts ...grpc.CallOption) (*ServiceList, error)
	// Start a service
	Start(ctx context.Context, in *ServiceId, opts ...grpc.CallOption) (*ServiceList, error)
}

type gafferClient struct {
	cc grpc.ClientConnInterface
}

func NewGafferClient(cc grpc.ClientConnInterface) GafferClient {
	return &gafferClient{cc}
}

func (c *gafferClient) Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/gaffer.Gaffer/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gafferClient) Services(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ServiceList, error) {
	out := new(ServiceList)
	err := c.cc.Invoke(ctx, "/gaffer.Gaffer/Services", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gafferClient) Update(ctx context.Context, in *ServiceUpdateRequest, opts ...grpc.CallOption) (*ServiceList, error) {
	out := new(ServiceList)
	err := c.cc.Invoke(ctx, "/gaffer.Gaffer/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gafferClient) Start(ctx context.Context, in *ServiceId, opts ...grpc.CallOption) (*ServiceList, error) {
	out := new(ServiceList)
	err := c.cc.Invoke(ctx, "/gaffer.Gaffer/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GafferServer is the server API for Gaffer service.
type GafferServer interface {
	// Simple ping method to show server is "up"
	Ping(context.Context, *empty.Empty) (*empty.Empty, error)
	// Return services
	Services(context.Context, *empty.Empty) (*ServiceList, error)
	// Update a service
	Update(context.Context, *ServiceUpdateRequest) (*ServiceList, error)
	// Start a service
	Start(context.Context, *ServiceId) (*ServiceList, error)
}

// UnimplementedGafferServer can be embedded to have forward compatible implementations.
type UnimplementedGafferServer struct {
}

func (*UnimplementedGafferServer) Ping(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedGafferServer) Services(context.Context, *empty.Empty) (*ServiceList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Services not implemented")
}
func (*UnimplementedGafferServer) Update(context.Context, *ServiceUpdateRequest) (*ServiceList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedGafferServer) Start(context.Context, *ServiceId) (*ServiceList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}

func RegisterGafferServer(s *grpc.Server, srv GafferServer) {
	s.RegisterService(&_Gaffer_serviceDesc, srv)
}

func _Gaffer_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GafferServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gaffer.Gaffer/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GafferServer).Ping(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gaffer_Services_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GafferServer).Services(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gaffer.Gaffer/Services",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GafferServer).Services(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gaffer_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GafferServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gaffer.Gaffer/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GafferServer).Update(ctx, req.(*ServiceUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gaffer_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GafferServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gaffer.Gaffer/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GafferServer).Start(ctx, req.(*ServiceId))
	}
	return interceptor(ctx, in, info, handler)
}

var _Gaffer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gaffer.Gaffer",
	HandlerType: (*GafferServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Gaffer_Ping_Handler,
		},
		{
			MethodName: "Services",
			Handler:    _Gaffer_Services_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Gaffer_Update_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _Gaffer_Start_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gaffer/gaffer.proto",
}
