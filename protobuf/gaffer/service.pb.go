// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gaffer/service.proto

package gaffer

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("gaffer/service.proto", fileDescriptor_d89f813df1b8899b)
}

var fileDescriptor_d89f813df1b8899b = []byte{
	// 107 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x49, 0x4f, 0x4c, 0x4b,
	0x4b, 0x2d, 0xd2, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0x62, 0x83, 0x88, 0x4a, 0x49, 0xa7, 0xe7, 0xe7, 0xa7, 0xe7, 0xa4, 0xea, 0x83, 0x45, 0x93,
	0x4a, 0xd3, 0xf4, 0x53, 0x73, 0x0b, 0x4a, 0x2a, 0x21, 0x8a, 0x8c, 0x1c, 0xb8, 0xd8, 0xdc, 0xc1,
	0xca, 0x84, 0xcc, 0xb8, 0x58, 0x02, 0x32, 0xf3, 0xd2, 0x85, 0xc4, 0xf4, 0x20, 0xea, 0xf5, 0x60,
	0xea, 0xf5, 0x5c, 0x41, 0xea, 0xa5, 0x70, 0x88, 0x27, 0xb1, 0x81, 0xf9, 0xc6, 0x80, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x63, 0x90, 0x22, 0xde, 0x85, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GafferClient is the client API for Gaffer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GafferClient interface {
	// Simple ping method to show server is "up"
	Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type gafferClient struct {
	cc grpc.ClientConnInterface
}

func NewGafferClient(cc grpc.ClientConnInterface) GafferClient {
	return &gafferClient{cc}
}

func (c *gafferClient) Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/gaffer.Gaffer/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GafferServer is the server API for Gaffer service.
type GafferServer interface {
	// Simple ping method to show server is "up"
	Ping(context.Context, *empty.Empty) (*empty.Empty, error)
}

// UnimplementedGafferServer can be embedded to have forward compatible implementations.
type UnimplementedGafferServer struct {
}

func (*UnimplementedGafferServer) Ping(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}

func RegisterGafferServer(s *grpc.Server, srv GafferServer) {
	s.RegisterService(&_Gaffer_serviceDesc, srv)
}

func _Gaffer_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GafferServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gaffer.Gaffer/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GafferServer).Ping(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Gaffer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gaffer.Gaffer",
	HandlerType: (*GafferServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Gaffer_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gaffer/service.proto",
}
