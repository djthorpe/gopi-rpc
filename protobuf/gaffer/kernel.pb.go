//
//Go Language Raspberry Pi Interface
//(c) Copyright David Thorpe 2016-2020
//All Rights Reserved
//For Licensing and Usage information, please see LICENSE.md

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.4
// source: gaffer/kernel.proto

package gaffer

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type KernelProcess_State int32

const (
	KernelProcess_NONE     KernelProcess_State = 0
	KernelProcess_NEW      KernelProcess_State = 1
	KernelProcess_RUNNING  KernelProcess_State = 2
	KernelProcess_STOPPING KernelProcess_State = 3
	KernelProcess_STOPPED  KernelProcess_State = 4
)

// Enum value maps for KernelProcess_State.
var (
	KernelProcess_State_name = map[int32]string{
		0: "NONE",
		1: "NEW",
		2: "RUNNING",
		3: "STOPPING",
		4: "STOPPED",
	}
	KernelProcess_State_value = map[string]int32{
		"NONE":     0,
		"NEW":      1,
		"RUNNING":  2,
		"STOPPING": 3,
		"STOPPED":  4,
	}
)

func (x KernelProcess_State) Enum() *KernelProcess_State {
	p := new(KernelProcess_State)
	*p = x
	return p
}

func (x KernelProcess_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KernelProcess_State) Descriptor() protoreflect.EnumDescriptor {
	return file_gaffer_kernel_proto_enumTypes[0].Descriptor()
}

func (KernelProcess_State) Type() protoreflect.EnumType {
	return &file_gaffer_kernel_proto_enumTypes[0]
}

func (x KernelProcess_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KernelProcess_State.Descriptor instead.
func (KernelProcess_State) EnumDescriptor() ([]byte, []int) {
	return file_gaffer_kernel_proto_rawDescGZIP(), []int{3, 0}
}

type KernelProcessEvent_State int32

const (
	KernelProcessEvent_NONE     KernelProcessEvent_State = 0
	KernelProcessEvent_NEW      KernelProcessEvent_State = 1
	KernelProcessEvent_RUNNING  KernelProcessEvent_State = 2
	KernelProcessEvent_STOPPING KernelProcessEvent_State = 3
	KernelProcessEvent_STOPPED  KernelProcessEvent_State = 4
	KernelProcessEvent_STDOUT   KernelProcessEvent_State = 5
	KernelProcessEvent_STDERR   KernelProcessEvent_State = 6
)

// Enum value maps for KernelProcessEvent_State.
var (
	KernelProcessEvent_State_name = map[int32]string{
		0: "NONE",
		1: "NEW",
		2: "RUNNING",
		3: "STOPPING",
		4: "STOPPED",
		5: "STDOUT",
		6: "STDERR",
	}
	KernelProcessEvent_State_value = map[string]int32{
		"NONE":     0,
		"NEW":      1,
		"RUNNING":  2,
		"STOPPING": 3,
		"STOPPED":  4,
		"STDOUT":   5,
		"STDERR":   6,
	}
)

func (x KernelProcessEvent_State) Enum() *KernelProcessEvent_State {
	p := new(KernelProcessEvent_State)
	*p = x
	return p
}

func (x KernelProcessEvent_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KernelProcessEvent_State) Descriptor() protoreflect.EnumDescriptor {
	return file_gaffer_kernel_proto_enumTypes[1].Descriptor()
}

func (KernelProcessEvent_State) Type() protoreflect.EnumType {
	return &file_gaffer_kernel_proto_enumTypes[1]
}

func (x KernelProcessEvent_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KernelProcessEvent_State.Descriptor instead.
func (KernelProcessEvent_State) EnumDescriptor() ([]byte, []int) {
	return file_gaffer_kernel_proto_rawDescGZIP(), []int{4, 0}
}

// A returned process identifier
type ProcessId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // Process ID of a running process
}

func (x *ProcessId) Reset() {
	*x = ProcessId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gaffer_kernel_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessId) ProtoMessage() {}

func (x *ProcessId) ProtoReflect() protoreflect.Message {
	mi := &file_gaffer_kernel_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessId.ProtoReflect.Descriptor instead.
func (*ProcessId) Descriptor() ([]byte, []int) {
	return file_gaffer_kernel_proto_rawDescGZIP(), []int{0}
}

func (x *ProcessId) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// Return a list of processes
type KernelProcessList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Process []*KernelProcess `protobuf:"bytes,1,rep,name=process,proto3" json:"process,omitempty"`
}

func (x *KernelProcessList) Reset() {
	*x = KernelProcessList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gaffer_kernel_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KernelProcessList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KernelProcessList) ProtoMessage() {}

func (x *KernelProcessList) ProtoReflect() protoreflect.Message {
	mi := &file_gaffer_kernel_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KernelProcessList.ProtoReflect.Descriptor instead.
func (*KernelProcessList) Descriptor() ([]byte, []int) {
	return file_gaffer_kernel_proto_rawDescGZIP(), []int{1}
}

func (x *KernelProcessList) GetProcess() []*KernelProcess {
	if x != nil {
		return x.Process
	}
	return nil
}

// Return a list of executables
type KernelExecutableList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Executable []string `protobuf:"bytes,1,rep,name=executable,proto3" json:"executable,omitempty"`
}

func (x *KernelExecutableList) Reset() {
	*x = KernelExecutableList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gaffer_kernel_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KernelExecutableList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KernelExecutableList) ProtoMessage() {}

func (x *KernelExecutableList) ProtoReflect() protoreflect.Message {
	mi := &file_gaffer_kernel_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KernelExecutableList.ProtoReflect.Descriptor instead.
func (*KernelExecutableList) Descriptor() ([]byte, []int) {
	return file_gaffer_kernel_proto_rawDescGZIP(), []int{2}
}

func (x *KernelExecutableList) GetExecutable() []string {
	if x != nil {
		return x.Executable
	}
	return nil
}

// Return information about a process
type KernelProcess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      *ProcessId          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	State   KernelProcess_State `protobuf:"varint,2,opt,name=state,proto3,enum=gaffer.KernelProcess_State" json:"state,omitempty"`
	Service *Service            `protobuf:"bytes,3,opt,name=service,proto3" json:"service,omitempty"`
}

func (x *KernelProcess) Reset() {
	*x = KernelProcess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gaffer_kernel_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KernelProcess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KernelProcess) ProtoMessage() {}

func (x *KernelProcess) ProtoReflect() protoreflect.Message {
	mi := &file_gaffer_kernel_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KernelProcess.ProtoReflect.Descriptor instead.
func (*KernelProcess) Descriptor() ([]byte, []int) {
	return file_gaffer_kernel_proto_rawDescGZIP(), []int{3}
}

func (x *KernelProcess) GetId() *ProcessId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *KernelProcess) GetState() KernelProcess_State {
	if x != nil {
		return x.State
	}
	return KernelProcess_NONE
}

func (x *KernelProcess) GetService() *Service {
	if x != nil {
		return x.Service
	}
	return nil
}

// Monitor discovery changes
type KernelProcessEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State   KernelProcessEvent_State `protobuf:"varint,1,opt,name=state,proto3,enum=gaffer.KernelProcessEvent_State" json:"state,omitempty"`
	Process *KernelProcess           `protobuf:"bytes,2,opt,name=process,proto3" json:"process,omitempty"`
	Buf     []byte                   `protobuf:"bytes,3,opt,name=buf,proto3" json:"buf,omitempty"`
	Error   string                   `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *KernelProcessEvent) Reset() {
	*x = KernelProcessEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gaffer_kernel_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KernelProcessEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KernelProcessEvent) ProtoMessage() {}

func (x *KernelProcessEvent) ProtoReflect() protoreflect.Message {
	mi := &file_gaffer_kernel_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KernelProcessEvent.ProtoReflect.Descriptor instead.
func (*KernelProcessEvent) Descriptor() ([]byte, []int) {
	return file_gaffer_kernel_proto_rawDescGZIP(), []int{4}
}

func (x *KernelProcessEvent) GetState() KernelProcessEvent_State {
	if x != nil {
		return x.State
	}
	return KernelProcessEvent_NONE
}

func (x *KernelProcessEvent) GetProcess() *KernelProcess {
	if x != nil {
		return x.Process
	}
	return nil
}

func (x *KernelProcessEvent) GetBuf() []byte {
	if x != nil {
		return x.Buf
	}
	return nil
}

func (x *KernelProcessEvent) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

var File_gaffer_kernel_proto protoreflect.FileDescriptor

var file_gaffer_kernel_proto_rawDesc = []byte{
	0x0a, 0x13, 0x67, 0x61, 0x66, 0x66, 0x65, 0x72, 0x2f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x67, 0x61, 0x66, 0x66, 0x65, 0x72, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x61, 0x66, 0x66,
	0x65, 0x72, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x1b, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x44, 0x0a,
	0x11, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x61, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4b, 0x65, 0x72,
	0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x22, 0x36, 0x0a, 0x14, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xd4, 0x01, 0x0a, 0x0d,
	0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x61, 0x66, 0x66,
	0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x31, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x67, 0x61, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67, 0x61, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x42,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x45, 0x57, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55,
	0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54, 0x4f, 0x50, 0x50,
	0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44,
	0x10, 0x04, 0x22, 0x81, 0x02, 0x0a, 0x12, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x67, 0x61, 0x66, 0x66, 0x65,
	0x72, 0x2e, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x2f, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x61, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4b, 0x65, 0x72, 0x6e,
	0x65, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x75, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x03, 0x62, 0x75, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x5a, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x07, 0x0a,
	0x03, 0x4e, 0x45, 0x57, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e,
	0x47, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x10,
	0x03, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0a,
	0x0a, 0x06, 0x53, 0x54, 0x44, 0x4f, 0x55, 0x54, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54,
	0x44, 0x45, 0x52, 0x52, 0x10, 0x06, 0x32, 0xa9, 0x03, 0x0a, 0x06, 0x4b, 0x65, 0x72, 0x6e, 0x65,
	0x6c, 0x12, 0x36, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x33, 0x0a, 0x0d, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x0f, 0x2e, 0x67, 0x61, 0x66,
	0x66, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x11, 0x2e, 0x67, 0x61,
	0x66, 0x66, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x37,
	0x0a, 0x0a, 0x52, 0x75, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x11, 0x2e, 0x67,
	0x61, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x70, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x11, 0x2e, 0x67, 0x61, 0x66, 0x66, 0x65, 0x72, 0x2e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x39, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x11,
	0x2e, 0x67, 0x61, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49,
	0x64, 0x1a, 0x19, 0x2e, 0x67, 0x61, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4b, 0x65, 0x72, 0x6e, 0x65,
	0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0b,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x1c, 0x2e, 0x67, 0x61, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4b, 0x65, 0x72,
	0x6e, 0x65, 0x6c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x11, 0x2e, 0x67, 0x61, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x49, 0x64, 0x1a, 0x1a, 0x2e, 0x67, 0x61, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4b, 0x65,
	0x72, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x30, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gaffer_kernel_proto_rawDescOnce sync.Once
	file_gaffer_kernel_proto_rawDescData = file_gaffer_kernel_proto_rawDesc
)

func file_gaffer_kernel_proto_rawDescGZIP() []byte {
	file_gaffer_kernel_proto_rawDescOnce.Do(func() {
		file_gaffer_kernel_proto_rawDescData = protoimpl.X.CompressGZIP(file_gaffer_kernel_proto_rawDescData)
	})
	return file_gaffer_kernel_proto_rawDescData
}

var file_gaffer_kernel_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_gaffer_kernel_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_gaffer_kernel_proto_goTypes = []interface{}{
	(KernelProcess_State)(0),      // 0: gaffer.KernelProcess.State
	(KernelProcessEvent_State)(0), // 1: gaffer.KernelProcessEvent.State
	(*ProcessId)(nil),             // 2: gaffer.ProcessId
	(*KernelProcessList)(nil),     // 3: gaffer.KernelProcessList
	(*KernelExecutableList)(nil),  // 4: gaffer.KernelExecutableList
	(*KernelProcess)(nil),         // 5: gaffer.KernelProcess
	(*KernelProcessEvent)(nil),    // 6: gaffer.KernelProcessEvent
	(*Service)(nil),               // 7: gaffer.Service
	(*empty.Empty)(nil),           // 8: google.protobuf.Empty
}
var file_gaffer_kernel_proto_depIdxs = []int32{
	5,  // 0: gaffer.KernelProcessList.process:type_name -> gaffer.KernelProcess
	2,  // 1: gaffer.KernelProcess.id:type_name -> gaffer.ProcessId
	0,  // 2: gaffer.KernelProcess.state:type_name -> gaffer.KernelProcess.State
	7,  // 3: gaffer.KernelProcess.service:type_name -> gaffer.Service
	1,  // 4: gaffer.KernelProcessEvent.state:type_name -> gaffer.KernelProcessEvent.State
	5,  // 5: gaffer.KernelProcessEvent.process:type_name -> gaffer.KernelProcess
	8,  // 6: gaffer.Kernel.Ping:input_type -> google.protobuf.Empty
	7,  // 7: gaffer.Kernel.CreateProcess:input_type -> gaffer.Service
	2,  // 8: gaffer.Kernel.RunProcess:input_type -> gaffer.ProcessId
	2,  // 9: gaffer.Kernel.StopProcess:input_type -> gaffer.ProcessId
	2,  // 10: gaffer.Kernel.Processes:input_type -> gaffer.ProcessId
	8,  // 11: gaffer.Kernel.Executables:input_type -> google.protobuf.Empty
	2,  // 12: gaffer.Kernel.StreamEvents:input_type -> gaffer.ProcessId
	8,  // 13: gaffer.Kernel.Ping:output_type -> google.protobuf.Empty
	2,  // 14: gaffer.Kernel.CreateProcess:output_type -> gaffer.ProcessId
	8,  // 15: gaffer.Kernel.RunProcess:output_type -> google.protobuf.Empty
	8,  // 16: gaffer.Kernel.StopProcess:output_type -> google.protobuf.Empty
	3,  // 17: gaffer.Kernel.Processes:output_type -> gaffer.KernelProcessList
	4,  // 18: gaffer.Kernel.Executables:output_type -> gaffer.KernelExecutableList
	6,  // 19: gaffer.Kernel.StreamEvents:output_type -> gaffer.KernelProcessEvent
	13, // [13:20] is the sub-list for method output_type
	6,  // [6:13] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_gaffer_kernel_proto_init() }
func file_gaffer_kernel_proto_init() {
	if File_gaffer_kernel_proto != nil {
		return
	}
	file_gaffer_service_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_gaffer_kernel_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gaffer_kernel_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KernelProcessList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gaffer_kernel_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KernelExecutableList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gaffer_kernel_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KernelProcess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gaffer_kernel_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KernelProcessEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gaffer_kernel_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_gaffer_kernel_proto_goTypes,
		DependencyIndexes: file_gaffer_kernel_proto_depIdxs,
		EnumInfos:         file_gaffer_kernel_proto_enumTypes,
		MessageInfos:      file_gaffer_kernel_proto_msgTypes,
	}.Build()
	File_gaffer_kernel_proto = out.File
	file_gaffer_kernel_proto_rawDesc = nil
	file_gaffer_kernel_proto_goTypes = nil
	file_gaffer_kernel_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// KernelClient is the client API for Kernel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KernelClient interface {
	// Simple ping method to show server is "up"
	Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// Create a new process
	CreateProcess(ctx context.Context, in *Service, opts ...grpc.CallOption) (*ProcessId, error)
	// Run a process
	RunProcess(ctx context.Context, in *ProcessId, opts ...grpc.CallOption) (*empty.Empty, error)
	// Stop a process
	StopProcess(ctx context.Context, in *ProcessId, opts ...grpc.CallOption) (*empty.Empty, error)
	// Return filtered list of processes
	Processes(ctx context.Context, in *ProcessId, opts ...grpc.CallOption) (*KernelProcessList, error)
	// Return list of service executables
	Executables(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*KernelExecutableList, error)
	// Stream filtered list of events
	StreamEvents(ctx context.Context, in *ProcessId, opts ...grpc.CallOption) (Kernel_StreamEventsClient, error)
}

type kernelClient struct {
	cc grpc.ClientConnInterface
}

func NewKernelClient(cc grpc.ClientConnInterface) KernelClient {
	return &kernelClient{cc}
}

func (c *kernelClient) Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/gaffer.Kernel/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kernelClient) CreateProcess(ctx context.Context, in *Service, opts ...grpc.CallOption) (*ProcessId, error) {
	out := new(ProcessId)
	err := c.cc.Invoke(ctx, "/gaffer.Kernel/CreateProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kernelClient) RunProcess(ctx context.Context, in *ProcessId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/gaffer.Kernel/RunProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kernelClient) StopProcess(ctx context.Context, in *ProcessId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/gaffer.Kernel/StopProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kernelClient) Processes(ctx context.Context, in *ProcessId, opts ...grpc.CallOption) (*KernelProcessList, error) {
	out := new(KernelProcessList)
	err := c.cc.Invoke(ctx, "/gaffer.Kernel/Processes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kernelClient) Executables(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*KernelExecutableList, error) {
	out := new(KernelExecutableList)
	err := c.cc.Invoke(ctx, "/gaffer.Kernel/Executables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kernelClient) StreamEvents(ctx context.Context, in *ProcessId, opts ...grpc.CallOption) (Kernel_StreamEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Kernel_serviceDesc.Streams[0], "/gaffer.Kernel/StreamEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &kernelStreamEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Kernel_StreamEventsClient interface {
	Recv() (*KernelProcessEvent, error)
	grpc.ClientStream
}

type kernelStreamEventsClient struct {
	grpc.ClientStream
}

func (x *kernelStreamEventsClient) Recv() (*KernelProcessEvent, error) {
	m := new(KernelProcessEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// KernelServer is the server API for Kernel service.
type KernelServer interface {
	// Simple ping method to show server is "up"
	Ping(context.Context, *empty.Empty) (*empty.Empty, error)
	// Create a new process
	CreateProcess(context.Context, *Service) (*ProcessId, error)
	// Run a process
	RunProcess(context.Context, *ProcessId) (*empty.Empty, error)
	// Stop a process
	StopProcess(context.Context, *ProcessId) (*empty.Empty, error)
	// Return filtered list of processes
	Processes(context.Context, *ProcessId) (*KernelProcessList, error)
	// Return list of service executables
	Executables(context.Context, *empty.Empty) (*KernelExecutableList, error)
	// Stream filtered list of events
	StreamEvents(*ProcessId, Kernel_StreamEventsServer) error
}

// UnimplementedKernelServer can be embedded to have forward compatible implementations.
type UnimplementedKernelServer struct {
}

func (*UnimplementedKernelServer) Ping(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedKernelServer) CreateProcess(context.Context, *Service) (*ProcessId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProcess not implemented")
}
func (*UnimplementedKernelServer) RunProcess(context.Context, *ProcessId) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunProcess not implemented")
}
func (*UnimplementedKernelServer) StopProcess(context.Context, *ProcessId) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopProcess not implemented")
}
func (*UnimplementedKernelServer) Processes(context.Context, *ProcessId) (*KernelProcessList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Processes not implemented")
}
func (*UnimplementedKernelServer) Executables(context.Context, *empty.Empty) (*KernelExecutableList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Executables not implemented")
}
func (*UnimplementedKernelServer) StreamEvents(*ProcessId, Kernel_StreamEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamEvents not implemented")
}

func RegisterKernelServer(s *grpc.Server, srv KernelServer) {
	s.RegisterService(&_Kernel_serviceDesc, srv)
}

func _Kernel_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KernelServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gaffer.Kernel/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KernelServer).Ping(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kernel_CreateProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Service)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KernelServer).CreateProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gaffer.Kernel/CreateProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KernelServer).CreateProcess(ctx, req.(*Service))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kernel_RunProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KernelServer).RunProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gaffer.Kernel/RunProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KernelServer).RunProcess(ctx, req.(*ProcessId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kernel_StopProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KernelServer).StopProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gaffer.Kernel/StopProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KernelServer).StopProcess(ctx, req.(*ProcessId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kernel_Processes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KernelServer).Processes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gaffer.Kernel/Processes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KernelServer).Processes(ctx, req.(*ProcessId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kernel_Executables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KernelServer).Executables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gaffer.Kernel/Executables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KernelServer).Executables(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kernel_StreamEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProcessId)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KernelServer).StreamEvents(m, &kernelStreamEventsServer{stream})
}

type Kernel_StreamEventsServer interface {
	Send(*KernelProcessEvent) error
	grpc.ServerStream
}

type kernelStreamEventsServer struct {
	grpc.ServerStream
}

func (x *kernelStreamEventsServer) Send(m *KernelProcessEvent) error {
	return x.ServerStream.SendMsg(m)
}

var _Kernel_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gaffer.Kernel",
	HandlerType: (*KernelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Kernel_Ping_Handler,
		},
		{
			MethodName: "CreateProcess",
			Handler:    _Kernel_CreateProcess_Handler,
		},
		{
			MethodName: "RunProcess",
			Handler:    _Kernel_RunProcess_Handler,
		},
		{
			MethodName: "StopProcess",
			Handler:    _Kernel_StopProcess_Handler,
		},
		{
			MethodName: "Processes",
			Handler:    _Kernel_Processes_Handler,
		},
		{
			MethodName: "Executables",
			Handler:    _Kernel_Executables_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamEvents",
			Handler:       _Kernel_StreamEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "gaffer/kernel.proto",
}
